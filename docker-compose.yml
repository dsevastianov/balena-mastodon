version: '2.1'
x-default-environment: &default-environment
  LOCAL_DOMAIN: 7c45c13f642b2694a21f159392b33aad.balena-devices.com
volumes:
  caddy_data:
  caddy_config:
  caddy_logs:
  letsencrypt:
  postgres14:
  redis:
  mastodon:
  mastodon_public:
networks:
  external_network:
  internal_network:
    internal: true
services:
  db:
    image: postgres:14-alpine
    restart: always
    shm_size: 256mb
    networks:
      - internal_network
    healthcheck:
      test: ['CMD', 'pg_isready', '-U', 'postgres']
    volumes:
      - postgres14:/var/lib/postgresql/data
    environment:
      - POSTGRES_HOST_AUTH_METHOD=trust

  redis:
    restart: always
    image: redis:6-alpine
    networks:
      - internal_network
    healthcheck:
      test: ['CMD', 'redis-cli', 'ping']
    volumes:
      - redis:/data
  
  # es:
  #   restart: always
  #   image: elasticsearch:7.17.5
  #   environment:
  #     - "ES_JAVA_OPTS=-Xms512m -Xmx512m -Des.enforce.bootstrap.checks=true"
  #     - "ES_SETTING_XPACK_LICENSE_SELF__GENERATED_TYPE=basic"
  #     - "ES_SETTING_XPACK_SECURITY_ENABLED=false"
  #     - "ES_SETTING_XPACK_WATCHER_ENABLED=false"
  #     - "ES_SETTING_XPACK_GRAPH_ENABLED=false"
  #     - "ES_SETTING_XPACK_ML_ENABLED=false"
  #     - "ES_SETTING_BOOTSTRAP_MEMORY__LOCK=true"
  #     - "ES_SETTING_CLUSTER_NAME=es-mastodon"
  #     - "ES_SETTING_DISCOVERY_TYPE=single-node"
  #     - "ES_SETTING_THREAD__POOL_WRITE_QUEUE__SIZE=1000"
  #   networks:
  #      - internal_network
  #   healthcheck:
  #      test: ["CMD-SHELL", "curl --silent --fail localhost:9200/_cluster/health || exit 1"]
  #   volumes:
  #      - elasticsearch:/usr/share/elasticsearch/data
  #   ulimits:
  #     memlock:
  #       soft: -1
  #       hard: -1
  #     nofile:
  #       soft: 65536
  #       hard: 65536
  #   ports:
  #     - '127.0.0.1:9200:9200'
  #     - '127.0.0.1:9300:9300'

  web:
    build: .
    restart: always
    environment:
      <<: *default-environment
    entrypoint:
      - /bin/sh
      - -c
    command: 
     - |
        set -ea

        while !(pg_isready -h db -U postgres); do
          echo "Waiting for postgres server to come online..."
          sleep "$(( (RANDOM % 3) + 3 ))s"
        done

        #create mastodon user in Postgres if doesn't exist        
        psql -h db -U postgres -c "\du" | grep -q mastodon || createuser -h db -U postgres -d mastodon
        
        #init mastodon database
        psql -h db -U postgres -c "\l" | grep -q mastodon || bundle exec rake db:setup

        rm -f /mastodon/tmp/pids/server.pid
        bundle exec rails s -p 3000
        
    networks:
      - external_network
      - internal_network
    healthcheck:
      # prettier-ignore
      test: ['CMD-SHELL', 'wget -q --spider --proxy=off localhost:3000/health || exit 1']
    depends_on:
      - db
      - redis     
    volumes:
      - mastodon_public:/mastodon/public
      - mastodon:/mastodon/public/system
  
  caddy:
    build: ./caddy
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - mastodon_public:/srv/mastodon/public
      - caddy_data:/data
      - caddy_config:/config
      - caddy_logs:/logs
    environment:
      <<: *default-environment
    networks:
      - external_network
      - internal_network

  sidekiq:
    build: .
    image: tootsuite/mastodon
    restart: always
    environment:
      <<: *default-environment
    command: bundle exec sidekiq
    depends_on:
      - web
    networks:
      - external_network
      - internal_network
    volumes:
      - mastodon:/mastodon/public/system
    healthcheck:
      test: ['CMD-SHELL', "ps aux | grep '[s]idekiq\ 6' || false"]


  streaming:
    build: .
    image: tootsuite/mastodon
    restart: always
    environment:
      <<: *default-environment
    command: node ./streaming
    depends_on:
      - web
    networks:
      - external_network
      - internal_network
    healthcheck:
      # prettier-ignore
      test: ['CMD-SHELL', 'wget -q --spider --proxy=off localhost:4000/api/v1/streaming/health || exit 1']   